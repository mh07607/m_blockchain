import hashlib
from merkle_tree import MerkleTree, Node

class Block:
    def __init__(self, merkle_tree: MerkleTree, previous_block=None):
        self.previous_block = previous_block   #every block has a pointer to its previous block
        self.mtree: MerkleTree = merkle_tree
        self.hash = self.mtree.root.value #the hash of each block is equal to root hash of its merkle tree

    def verify_block(self):
        return self.mtree.verify_tree()    #checks if root hash is equal to the hash generated by rebuilding the entire tree
    

class Blockchain:
    def __init__(self):
        self.head :Block = None
        self.length = 0
        #self.file_hash = None

    def add_block(self, addresses):
        #adding a block to a linked list. self.head is the most recently added block in the block chain
        merkle_tree = MerkleTree(addresses) #creating a merkle tree of all the files needed in the block as leaf nodes (addresses are passed)
        block = Block(merkle_tree)
        block.previous_block = self.head
        self.head = block
        self.length = self.length+1

    def add_document_to_block(self, address, block_number):
        i = self.length
        current_block = self.head
        while i > block_number+1: #traversing the linked list to find specific block
            current_block = current_block.previous_block
            i = i-1
        current_block.mtree.add_Document(address) #adding the document to its merkle tree
        

    def verify(self):
        if not self.head:
            return 'True'

        current_block = self.head
        i = self.length
        while current_block: #traversing the whole chain and verifying each block
            if(current_block.verify_block()):
                current_block = current_block.previous_block
            else:
                return i-1 #if ith block is not verified i.e. some file has been tampered with, then return index i.e. i
            i = i - 1
        return 'True'
    
    def verify_document(self, address, block_number): #verifying a specific document
        i = self.length #traversing the blockchain to find the block where the document is stored
        current_block = self.head
        while i > block_number:
            current_block = current_block.previous_block
            i = i-1

        return current_block.mtree.verify_inclusion(address)  #returning whether document belongs in that block (i.e. whether document content has changed or not)

    #---------------------------------------obsolete-------------------------------------------------


    # def update_block(self, block_data, new_data):
    #     current_block = self.head
    #     while current_block:
    #         if current_block.data == block_data:
    #             current_block.data = new_data
    #             current_block.update_hash()
    #             self.file_hash = hashlib.sha256(new_data + self.file_hash.encode('utf-8')).hexdigest()
    #             break
    #         current_block = current_block.previous_block

    # def add_files(self, filenames):      

    #     if not self.head:
    #         mtree = MerkleTree(filenames)
    #         self.head = Block(mtree)
    #         #self.file_hash = hashlib.sha256(file_data).hexdigest()
    #     else:
    #         mtree = MerkleTree(filenames)
    #         new_block = Block(self.head)
    #         #new_block.previous_hash = self.head.hash
    #         new_block.previous_block = self.head
    #         self.head = new_block
    #                 #self.file_hash = hashlib.sha256(file_data + self.file_hash.encode('utf-8')).hexdigest()


#------------------------------------testing------------------------------------------------------

# blockchain = Blockchain()

# blockchain.add_file("s1.txt")

# print(blockchain.verify())

# with open("s1.txt", "a") as f:
#     f.write("This is some new content.")

# print(blockchain.verify())

# blockchain.update_block(b'This is the original file contents.', b'This is the new file contents.')

# print(blockchain.verify())
# bc = Blockchain()
# bc.add_files(["dataset\sample test case\s1.txt", "dataset\sample test case\s2.txt", "dataset\sample test case\s3.txt"])
# print(bc.verify())
# with open("dataset\sample test case\s1.txt", "a") as f:
#     f.write("yeet")
# print(bc.verify())
# print("doc3", bc.verify_document("dataset\sample test case\s3.txt", 0))
# print("doc2", bc.verify_document("dataset\sample test case\s2.txt", 0))
# print("doc1", bc.verify_document("dataset\sample test case\s1.txt", 0))

